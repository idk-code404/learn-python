[
  {
    "id": 1,
    "category": "Beginner",
    "title": "Hello World",
    "content": "Learn how to print your first message in Python.",
    "code": "print('Hello, World!')",
    "quiz": {
      "question": "What function is used to display output in Python?",
      "options": ["echo()", "print()", "say()", "output()"],
      "answer": "print()"
    }
  },
  {
    "id": 2,
    "category": "Beginner",
    "title": "Variables",
    "content": "Learn how to store and use variables.",
    "code": "name = 'Alice'\nprint(name)",
    "quiz": {
      "question": "Which symbol is used for assignment in Python?",
      "options": ["=", "==", "->", ":"],
      "answer": "="
    }
  },
  {
    "id": 3,
    "category": "Beginner",
    "title": "Data Types",
    "content": "Numbers, strings, and booleans are basic data types.",
    "code": "age = 25\nheight = 5.9\nis_student = True\nprint(age, height, is_student)",
    "quiz": {
      "question": "Which of these is NOT a basic type?",
      "options": ["int", "str", "float", "char"],
      "answer": "char"
    }
  },
  {
    "id": 4,
    "category": "Beginner",
    "title": "Lists",
    "content": "Lists can hold multiple values.",
    "code": "fruits = ['apple','banana','cherry']\nprint(fruits[0])",
    "quiz": {
      "question": "How do you access the first element of a list?",
      "options": ["list.1", "list[0]", "list.first()", "list[-1]"],
      "answer": "list[0]"
    }
  },
  {
    "id": 5,
    "category": "Beginner",
    "title": "Loops",
    "content": "Loops let you repeat actions.",
    "code": "for i in range(3):\n    print(i)",
    "quiz": {
      "question": "What keyword starts a loop?",
      "options": ["repeat", "loop", "for", "iterate"],
      "answer": "for"
    }
  },
  {
    "id": 6,
    "category": "Intermediate",
    "title": "Functions",
    "content": "Functions help organize code into reusable blocks.",
    "code": "def greet(name):\n    return 'Hello ' + name\n\nprint(greet('Alice'))",
    "quiz": {
      "question": "What keyword defines a function?",
      "options": ["func", "function", "def", "lambda"],
      "answer": "def"
    }
  },
  {
    "id": 7,
    "category": "Intermediate",
    "title": "Exceptions",
    "content": "Handle errors with try/except.",
    "code": "try:\n    x = 1/0\nexcept ZeroDivisionError:\n    print('Cannot divide by zero')",
    "quiz": {
      "question": "Which block handles errors?",
      "options": ["try", "catch", "except", "error"],
      "answer": "except"
    }
  },
  {
    "id": 8,
    "category": "Intermediate",
    "title": "Modules",
    "content": "Import and use external modules.",
    "code": "import math\nprint(math.sqrt(16))",
    "quiz": {
      "question": "Which keyword imports a module?",
      "options": ["module", "use", "import", "require"],
      "answer": "import"
    }
  },
  {
    "id": 9,
    "category": "Intermediate",
    "title": "Libraries",
    "content": "Use Pythonâ€™s standard and third-party libraries.",
    "code": "import random\nprint(random.randint(1,10))",
    "quiz": {
      "question": "Which module generates random numbers?",
      "options": ["rand", "random", "numbers", "math"],
      "answer": "random"
    }
  },
  {
    "id": 10,
    "category": "Intermediate",
    "title": "File I/O",
    "content": "Read and write files in Python.",
    "code": "with open('test.txt','w') as f:\n    f.write('Hello File!')",
    "quiz": {
      "question": "Which function opens a file?",
      "options": ["open()", "file()", "read()", "load()"],
      "answer": "open()"
    }
  },
  {
    "id": 11,
    "category": "Advanced",
    "title": "Decorators",
    "content": "Decorators modify functions.",
    "code": "def log(func):\n    def wrapper():\n        print('Running...')\n        func()\n    return wrapper\n\n@log\ndef hello():\n    print('Hello')\n\nhello()",
    "quiz": {
      "question": "Which symbol applies a decorator?",
      "options": ["@", "#", "&", "%"],
      "answer": "@"
    }
  },
  {
    "id": 12,
    "category": "Advanced",
    "title": "Generators",
    "content": "Generators yield values one at a time.",
    "code": "def gen():\n    for i in range(3):\n        yield i\n\nfor x in gen():\n    print(x)",
    "quiz": {
      "question": "Which keyword yields values?",
      "options": ["return", "yield", "next", "send"],
      "answer": "yield"
    }
  },
  {
    "id": 13,
    "category": "Advanced",
    "title": "Async Programming",
    "content": "Use async/await for concurrency.",
    "code": "import asyncio\n\nasync def main():\n    print('Hello')\n    await asyncio.sleep(1)\n    print('World')\n\nasyncio.run(main())",
    "quiz": {
      "question": "Which keyword declares an async function?",
      "options": ["async", "await", "future", "task"],
      "answer": "async"
    }
  },
  {
    "id": 14,
    "category": "Advanced",
    "title": "NumPy Basics",
    "content": "NumPy enables fast array operations.",
    "code": "import numpy as np\narr = np.array([1,2,3])\nprint(arr*2)",
    "quiz": {
      "question": "Which library is used for arrays?",
      "options": ["numpy", "pandas", "math", "scipy"],
      "answer": "numpy"
    }
  },
  {
    "id": 15,
    "category": "Advanced",
    "title": "Flask Basics",
    "content": "Flask builds web applications.",
    "code": "from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return 'Hello Flask!'\n\nif __name__ == '__main__':\n    app.run()",
    "quiz": {
      "question": "Which decorator defines a route?",
      "options": ["@url", "@route", "@app.route", "@path"],
      "answer": "@app.route"
    }
  },
  {
    "id": 16,
    "category": "Advanced",
    "title": "OOP Classes",
    "content": "Define classes and objects.",
    "code": "class Dog:\n    def __init__(self,name):\n        self.name = name\n\nfido = Dog('Fido')\nprint(fido.name)",
    "quiz": {
      "question": "What keyword defines a class?",
      "options": ["object", "class", "define", "struct"],
      "answer": "class"
    }
  },
  {
    "id": 17,
    "category": "Expert",
    "title": "Context Managers",
    "content": "Use `with` to manage resources.",
    "code": "class MyResource:\n    def __enter__(self):\n        print('Enter')\n        return self\n    def __exit__(self, exc_type, exc, tb):\n        print('Exit')\n\nwith MyResource() as r:\n    print('Inside')",
    "quiz": {
      "question": "Which keyword is used with context managers?",
      "options": ["use", "with", "context", "manage"],
      "answer": "with"
    }
  },
  {
    "id": 18,
    "category": "Expert",
    "title": "Metaclasses",
    "content": "Control class creation with metaclasses.",
    "code": "class Meta(type):\n    def __new__(cls,name,bases,attrs):\n        attrs['created'] = True\n        return super().__new__(cls,name,bases,attrs)\n\nclass MyClass(metaclass=Meta):\n    pass\n\nprint(MyClass.created)",
    "quiz": {
      "question": "Which argument defines a metaclass?",
      "options": ["superclass", "parent", "metaclass", "type"],
      "answer": "metaclass"
    }
  },
  {
    "id": 19,
    "category": "Expert",
    "title": "C Extensions",
    "content": "Extend Python with C modules for speed.",
    "code": "# Example placeholder: actual C code needed\nprint('C extensions require compilation')",
    "quiz": {
      "question": "What language are CPython extensions typically written in?",
      "options": ["C", "Java", "Rust", "Go"],
      "answer": "C"
    }
  },
  {
    "id": 20,
    "category": "Expert",
    "title": "Multiprocessing",
    "content": "Use multiple processes for parallelism.",
    "code": "from multiprocessing import Process\n\ndef worker():\n    print('Working')\n\np = Process(target=worker)\np.start()\np.join()",
    "quiz": {
      "question": "Which module enables parallel processes?",
      "options": ["threading", "asyncio", "multiprocessing", "parallel"],
      "answer": "multiprocessing"
    }
  },
  {
    "id": 21,
    "category": "Expert",
    "title": "Cython",
    "content": "Write Python with C-like performance.",
    "code": "# Example: Requires Cython installed\nprint('Cython allows C speed in Python code')",
    "quiz": {
      "question": "Which tool compiles Python-like syntax to C?",
      "options": ["PyPy", "JIT", "Cython", "Numba"],
      "answer": "Cython"
    }
  },
  {
    "id": 22,
    "category": "Expert",
    "title": "Async Web with FastAPI",
    "content": "Build modern async APIs.",
    "code": "from fastapi import FastAPI\napp = FastAPI()\n\n@app.get('/')\ndef read_root():\n    return {'Hello':'World'}",
    "quiz": {
      "question": "Which keyword defines a FastAPI route?",
      "options": ["@url", "@app.get", "@route", "@fastapi"],
      "answer": "@app.get"
    }
  },
  {
    "id": 23,
    "category": "Expert",
    "title": "Machine Learning with scikit-learn",
    "content": "Train models with scikit-learn.",
    "code": "from sklearn.linear_model import LinearRegression\nimport numpy as np\nX = np.array([[1],[2],[3]])\ny = np.array([2,4,6])\nmodel = LinearRegression().fit(X,y)\nprint(model.predict([[4]]))",
    "quiz": {
      "question": "Which library provides ML algorithms?",
      "options": ["numpy", "scikit-learn", "matplotlib", "keras"],
      "answer": "scikit-learn"
    }
  },
  {
    "id": 24,
    "category": "Expert",
    "title": "Data Visualization with Matplotlib",
    "content": "Plot charts and graphs.",
    "code": "import matplotlib.pyplot as plt\nplt.plot([1,2,3],[2,4,6])\nplt.show()",
    "quiz": {
      "question": "Which function displays a plot?",
      "options": ["draw()", "plot()", "show()", "render()"],
      "answer": "show()"
    }
  },
  {
    "id": 25,
    "category": "Expert",
    "title": "Deep Learning with TensorFlow",
    "content": "Use TensorFlow for neural networks.",
    "code": "import tensorflow as tf\nprint(tf.__version__)",
    "quiz": {
      "question": "Which library is widely used for deep learning?",
      "options": ["TensorFlow", "Pandas", "NumPy", "Matplotlib"],
      "answer": "TensorFlow"
    }
  }
]
