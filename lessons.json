[
  {
    "id": 1,
    "title": "Hello World",
    "category": "Beginner",
    "content": "Your first Python program! Use the print() function to display text on the screen.",
    "codeExample": "print('Hello, World!')",
    "quiz": {
      "question": "If you want your Python program to greet the user with 'Hello, World!', which function should you use?",
      "options": ["display()", "echo()", "print()", "say()"],
      "answer": "print()"
    }
  },
  {
    "id": 2,
    "title": "Variables and Data Types",
    "category": "Beginner",
    "content": "Variables store data in Python. You can store strings, numbers, or booleans.",
    "codeExample": "name = 'Alice'\nage = 25\nis_student = True",
    "quiz": {
      "question": "You want to store a user's age as 25. What’s the correct Python syntax?",
      "options": ["int age = 25", "age = 25", "age := 25", "let age = 25"],
      "answer": "age = 25"
    }
  },
  {
    "id": 3,
    "title": "User Input",
    "category": "Beginner",
    "content": "Use input() to take input from users. It always returns a string.",
    "codeExample": "name = input('What is your name? ')\nprint('Hello', name)",
    "quiz": {
      "question": "If you want to ask the user for their name and then greet them, which function should you use to collect that information?",
      "options": ["print()", "input()", "get()", "ask()"],
      "answer": "input()"
    }
  },
  {
    "id": 4,
    "title": "Conditional Statements",
    "category": "Beginner",
    "content": "Use if, elif, and else to control program flow.",
    "codeExample": "if age >= 18:\n    print('Adult')\nelse:\n    print('Minor')",
    "quiz": {
      "question": "You need to check if a user is old enough to vote. Which keyword helps you run different code paths depending on a condition?",
      "options": ["switch", "if", "match", "loop"],
      "answer": "if"
    }
  },
  {
    "id": 5,
    "title": "Loops",
    "category": "Beginner",
    "content": "Use loops to repeat actions. for is used for sequences, while for repeated conditions.",
    "codeExample": "for i in range(5):\n    print(i)",
    "quiz": {
      "question": "If you want to print numbers from 0 to 4, which looping structure should you use?",
      "options": ["while i < 5", "for i in range(5)", "repeat(5)", "do until i == 5"],
      "answer": "for i in range(5)"
    }
  },
  {
    "id": 6,
    "title": "Functions",
    "category": "Beginner",
    "content": "Functions organize reusable code. Define with def and call them by name.",
    "codeExample": "def greet(name):\n    print('Hello', name)",
    "quiz": {
      "question": "You want to reuse a block of code that greets users by name. Which Python keyword defines such reusable blocks?",
      "options": ["def", "func", "lambda", "declare"],
      "answer": "def"
    }
  },
  {
    "id": 7,
    "title": "Lists",
    "category": "Beginner",
    "content": "Lists store ordered collections of items, which can be changed after creation.",
    "codeExample": "fruits = ['apple', 'banana', 'cherry']",
    "quiz": {
      "question": "You need to store multiple fruit names and be able to add more later. Which Python data type should you use?",
      "options": ["tuple", "set", "list", "dict"],
      "answer": "list"
    }
  },
  {
    "id": 8,
    "title": "Dictionaries",
    "category": "Beginner",
    "content": "Dictionaries store key-value pairs, useful for structured data.",
    "codeExample": "person = {'name': 'Alice', 'age': 25}",
    "quiz": {
      "question": "You want to store a user’s name and age as labeled data. Which data type uses key-value pairs for this purpose?",
      "options": ["set", "tuple", "dict", "list"],
      "answer": "dict"
    }
  },
  {
    "id": 9,
    "title": "String Formatting",
    "category": "Beginner",
    "content": "Use f-strings or format() to create dynamic text.",
    "codeExample": "name = 'Alice'\nprint(f'Hello, {name}!')",
    "quiz": {
      "question": "How would you insert a variable named 'user' into a greeting string?",
      "options": ["'Hello, ' + user", "print(f'Hello, {user}!')", "print('Hello, ${user}')", "printf('Hello, user')"],
      "answer": "print(f'Hello, {user}!')"
    }
  },
  {
    "id": 10,
    "title": "Comments",
    "category": "Beginner",
    "content": "Comments help explain code. Use # for single lines.",
    "codeExample": "# This is a comment\nprint('Hello')",
    "quiz": {
      "question": "When writing code, how can you add a note for yourself that Python will ignore?",
      "options": ["//", "/* */", "#", "--"],
      "answer": "#"
    }
  },

  {
    "id": 11,
    "title": "File Handling",
    "category": "Intermediate",
    "content": "Use open() to read or write files safely with context managers.",
    "codeExample": "with open('data.txt', 'r') as f:\n    content = f.read()",
    "quiz": {
      "question": "If you need to open a file and make sure it automatically closes when done, what Python structure should you use?",
      "options": ["try/except", "context manager (with)", "finally block", "loop"],
      "answer": "context manager (with)"
    }
  },
  {
    "id": 12,
    "title": "Error Handling",
    "category": "Intermediate",
    "content": "Use try, except, and finally to catch and handle runtime errors.",
    "codeExample": "try:\n    x = 1 / 0\nexcept ZeroDivisionError:\n    print('Cannot divide by zero!')",
    "quiz": {
      "question": "You expect some code might fail due to a bad file or division. Which structure lets you handle those errors gracefully?",
      "options": ["guard", "try/except", "if/else", "switch"],
      "answer": "try/except"
    }
  },
  {
    "id": 13,
    "title": "Modules and Imports",
    "category": "Intermediate",
    "content": "Use import to reuse Python files or libraries.",
    "codeExample": "import math\nprint(math.sqrt(16))",
    "quiz": {
      "question": "If you need to reuse functions from another file or library, what statement brings them into your program?",
      "options": ["include", "require", "import", "fromfile"],
      "answer": "import"
    }
  },
  {
    "id": 14,
    "title": "List Comprehensions",
    "category": "Intermediate",
    "content": "Create new lists from existing data with a single line of code.",
    "codeExample": "[x**2 for x in range(5)]",
    "quiz": {
      "question": "You want to create a list of squares from 0 to 4. Which concise Python expression can do that?",
      "options": ["for x in range(5): squares.append(x**2)", "[x**2 for x in range(5)]", "map(square, range(5))", "x^2 for x in range(5)"],
      "answer": "[x**2 for x in range(5)]"
    }
  },
  {
    "id": 15,
    "title": "Functions with Parameters",
    "category": "Intermediate",
    "content": "Functions can take parameters to customize behavior.",
    "codeExample": "def add(a, b):\n    return a + b",
    "quiz": {
      "question": "You want a function that adds any two numbers you give it. How can you define such a function?",
      "options": ["def add(a, b): return a + b", "func add(a,b): return a+b", "def add(a+b)", "add(a,b) = a + b"],
      "answer": "def add(a, b): return a + b"
    }
  },
  {
    "id": 16,
    "title": "Working with JSON",
    "category": "Intermediate",
    "content": "Use the json module to serialize and deserialize data.",
    "codeExample": "import json\ndata = json.loads('{\"name\":\"Alice\"}')",
    "quiz": {
      "question": "If you receive data in JSON format from an API, which library should you use to convert it into a Python dictionary?",
      "options": ["pickle", "csv", "json", "yaml"],
      "answer": "json"
    }
  },
  {
    "id": 17,
    "title": "Lambda Functions",
    "category": "Intermediate",
    "content": "Anonymous small functions, often used in filters or maps.",
    "codeExample": "square = lambda x: x ** 2",
    "quiz": {
      "question": "You want to quickly define a one-line function to double a number. What Python keyword creates such short functions?",
      "options": ["lambda", "inline", "def", "func"],
      "answer": "lambda"
    }
  },
  {
    "id": 18,
    "title": "OOP: Classes",
    "category": "Intermediate",
    "content": "Organize data and behavior using classes and objects.",
    "codeExample": "class Dog:\n    def __init__(self, name):\n        self.name = name",
    "quiz": {
      "question": "You need to model a Dog with properties like name and breed. What Python keyword defines such a structure?",
      "options": ["object", "class", "def", "structure"],
      "answer": "class"
    }
  },
  {
    "id": 19,
    "title": "Docstrings",
    "category": "Intermediate",
    "content": "Use triple quotes under a function or class for documentation.",
    "codeExample": "def greet():\n    \"\"\"Say hello\"\"\"\n    print('Hi!')",
    "quiz": {
      "question": "How can you add documentation that can be accessed using help()?",
      "options": ["# comment", "''' triple quotes '''", "/* block */", "doc()"],
      "answer": "''' triple quotes '''"
    }
  },
  {
    "id": 20,
    "title": "Virtual Environments",
    "category": "Intermediate",
    "content": "Keep projects isolated using venv or virtualenv.",
    "codeExample": "python -m venv myenv",
    "quiz": {
      "question": "If you want to isolate dependencies per project, what Python tool should you use?",
      "options": ["virtualenv", "docker", "conda", "pipenv"],
      "answer": "virtualenv"
    }
  },

  {
    "id": 21,
    "title": "Iterators and Generators",
    "category": "Advanced",
    "content": "Generators yield data lazily, saving memory.",
    "codeExample": "def countdown(n):\n    while n > 0:\n        yield n\n        n -= 1",
    "quiz": {
      "question": "You need to process a huge file line by line without loading it all at once. Which Python feature allows you to yield data lazily?",
      "options": ["iterator", "generator", "recursion", "lambda"],
      "answer": "generator"
    }
  },
  {
    "id": 22,
    "title": "Decorators",
    "category": "Advanced",
    "content": "Decorators modify function behavior without changing their code.",
    "codeExample": "def log(func):\n    def wrapper():\n        print('Running...')\n        func()\n    return wrapper",
    "quiz": {
      "question": "You want to automatically log each time a function is run. Which Python concept allows you to wrap functions with extra behavior?",
      "options": ["closures", "decorators", "generators", "classes"],
      "answer": "decorators"
    }
  },
  {
    "id": 23,
    "title": "Async Programming",
    "category": "Advanced",
    "content": "Use async/await to handle concurrent operations efficiently.",
    "codeExample": "async def fetch_data():\n    await asyncio.sleep(1)",
    "quiz": {
      "question": "You need to fetch data from multiple APIs at the same time. Which Python keywords help handle concurrency easily?",
      "options": ["async/await", "thread/run", "multi/process", "yield/next"],
      "answer": "async/await"
    }
  },
  {
    "id": 24,
    "title": "Regular Expressions",
    "category": "Advanced",
    "content": "Use re to find and manipulate text patterns.",
    "codeExample": "import re\nre.findall(r'\\d+', 'abc123xyz')",
    "quiz": {
      "question": "You need to find all numbers inside a long text string. Which Python library helps you use search patterns?",
      "options": ["string", "search", "re", "regexlib"],
      "answer": "re"
    }
  },
  {
    "id": 25,
    "title": "APIs and Requests",
    "category": "Advanced",
    "content": "Use requests library to communicate with web APIs.",
    "codeExample": "import requests\nres = requests.get('https://api.github.com')",
    "quiz": {
      "question": "To send a GET request and fetch data from an online API, which Python package would you use?",
      "options": ["urllib", "requests", "api", "http"],
      "answer": "requests"
    }
  },
  {
    "id": 26,
    "title": "File Paths and OS Module",
    "category": "Advanced",
    "content": "Use os and pathlib to manage file paths across systems.",
    "codeExample": "from pathlib import Path\nprint(Path.cwd())",
    "quiz": {
      "question": "You want your Python script to work on both Windows and Linux. Which module helps handle file paths safely?",
      "options": ["sys", "os", "pathlib", "glob"],
      "answer": "pathlib"
    }
  },
  {
    "id": 27,
    "title": "Logging",
    "category": "Advanced",
    "content": "Log program events for debugging and monitoring.",
    "codeExample": "import logging\nlogging.basicConfig(level=logging.INFO)",
    "quiz": {
      "question": "You want to record important events or errors while your program runs. Which built-in Python module provides this functionality?",
      "options": ["debug", "trace", "log", "logging"],
      "answer": "logging"
    }
  },
  {
    "id": 28,
    "title": "NumPy Basics",
    "category": "Advanced",
    "content": "NumPy enables fast array operations for numerical computing.",
    "codeExample": "import numpy as np\narr = np.array([1,2,3])",
    "quiz": {
      "question": "Which library provides high-speed array and matrix operations, ideal for scientific computing?",
      "options": ["SciPy", "NumPy", "Matplotlib", "TensorFlow"],
      "answer": "NumPy"
    }
  },
  {
    "id": 29,
    "title": "Matplotlib",
    "category": "Advanced",
    "content": "Matplotlib creates visual plots and charts for data analysis.",
    "codeExample": "import matplotlib.pyplot as plt\nplt.plot([1,2,3],[4,5,6])",
    "quiz": {
      "question": "Which Python library helps you create line charts and visual plots?",
      "options": ["Pandas", "NumPy", "Matplotlib", "Plotly"],
      "answer": "Matplotlib"
    }
  },
  {
    "id": 30,
    "title": "Flask Web Framework",
    "category": "Advanced",
    "content": "Flask allows lightweight web applications using Python.",
    "codeExample": "from flask import Flask\napp = Flask(__name__)\n@app.route('/')\ndef home(): return 'Hello!'",
    "quiz": {
      "question": "Which lightweight Python web framework is perfect for building small APIs or web apps?",
      "options": ["Django", "Flask", "FastAPI", "Tornado"],
      "answer": "Flask"
    }
  },
  {
    "id": 31,
    "title": "Machine Learning Basics",
    "category": "Expert",
    "content": "Learn basic ML concepts like features, labels, and models.",
    "codeExample": "from sklearn.linear_model import LinearRegression",
    "quiz": {
      "question": "Which Python library provides ready-made models like LinearRegression?",
      "options": ["NumPy", "Pandas", "scikit-learn", "TensorFlow"],
      "answer": "scikit-learn"
    }
  },
  {
    "id": 32,
    "title": "Pandas for DataFrames",
    "category": "Expert",
    "content": "Pandas provides flexible DataFrames for data manipulation.",
    "codeExample": "import pandas as pd\ndf = pd.DataFrame({'A':[1,2]})",
    "quiz": {
      "question": "You have tabular CSV data to clean and filter. Which library should you use?",
      "options": ["NumPy", "Pandas", "Matplotlib", "Seaborn"],
      "answer": "Pandas"
    }
  },
  {
    "id": 33,
    "title": "Web Scraping",
    "category": "Expert",
    "content": "Use BeautifulSoup to extract data from web pages.",
    "codeExample": "from bs4 import BeautifulSoup",
    "quiz": {
      "question": "Which library is best for parsing HTML content when scraping data from websites?",
      "options": ["requests", "BeautifulSoup", "urllib", "Scrapy"],
      "answer": "BeautifulSoup"
    }
  },
  {
    "id": 34,
    "title": "Testing with pytest",
    "category": "Expert",
    "content": "pytest automates testing and ensures code reliability.",
    "codeExample": "def test_sum(): assert sum([1,2]) == 3",
    "quiz": {
      "question": "You want to automatically verify your Python functions work correctly. Which framework helps automate such testing?",
      "options": ["unittest", "pytest", "doctest", "testify"],
      "answer": "pytest"
    }
  },
  {
    "id": 35,
    "title": "Async APIs",
    "category": "Expert",
    "content": "Combine async with APIs for concurrent data fetching.",
    "codeExample": "import aiohttp",
    "quiz": {
      "question": "You need to fetch 10 APIs at once for speed. Which Python library supports asynchronous HTTP requests?",
      "options": ["requests", "urllib", "aiohttp", "flask"],
      "answer": "aiohttp"
    }
  },
  {
    "id": 36,
    "title": "Parallel Processing",
    "category": "Expert",
    "content": "Use multiprocessing for CPU-bound tasks.",
    "codeExample": "from multiprocessing import Pool",
    "quiz": {
      "question": "Your program must compute across 8 CPU cores simultaneously. Which module helps achieve this?",
      "options": ["asyncio", "threading", "multiprocessing", "concurrent"],
      "answer": "multiprocessing"
    }
  },
  {
    "id": 37,
    "title": "Django Basics",
    "category": "Expert",
    "content": "Django is a full-featured web framework for Python.",
    "codeExample": "django-admin startproject mysite",
    "quiz": {
      "question": "Which Python framework follows the MVC pattern and includes an ORM?",
      "options": ["Flask", "Django", "FastAPI", "Bottle"],
      "answer": "Django"
    }
  },
  {
    "id": 38,
    "title": "Data Visualization with Seaborn",
    "category": "Expert",
    "content": "Seaborn simplifies statistical data visualization.",
    "codeExample": "import seaborn as sns\nsns.barplot(x='A', y='B', data=df)",
    "quiz": {
      "question": "You want to plot elegant and informative charts easily. Which Python library builds on Matplotlib for this?",
      "options": ["Plotly", "Seaborn", "Bokeh", "Dash"],
      "answer": "Seaborn"
    }
  },
  {
    "id": 39,
    "title": "Deploying Flask Apps",
    "category": "Expert",
    "content": "Learn how to deploy Flask apps using Gunicorn or Render.",
    "codeExample": "gunicorn app:app",
    "quiz": {
      "question": "Which command runs a Flask app in production using Gunicorn?",
      "options": ["python app.py", "flask run", "gunicorn app:app", "uwsgi app.py"],
      "answer": "gunicorn app:app"
    }
  },
  {
    "id": 40,
    "title": "AI with OpenAI API",
    "category": "Expert",
    "content": "Use OpenAI's API for intelligent text generation and chatbots.",
    "codeExample": "import openai",
    "quiz": {
      "question": "You want your Python app to generate natural language responses. Which API can do this?",
      "options": ["Google Translate API", "OpenAI API", "Azure ML API", "TensorFlow API"],
      "answer": "OpenAI API"
    }
  }
]
