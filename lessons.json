[
  {
    "category": "Beginner",
    "id": 1,
    "title": "Introduction to Python",
    "content": "Python is a high-level, interpreted programming language known for its simplicity and readability. It’s great for web development, data analysis, AI, and more.",
    "code": "print('Hello, Python!')",
    "quiz": {
      "question": "Why is Python considered an interpreted language?",
      "options": [
        "Because Python translates code to machine language before running",
        "Because Python executes code line by line at runtime",
        "Because Python compiles code to C before running",
        "Because Python runs only in browsers"
      ],
      "answer": "Because Python executes code line by line at runtime"
    }
  },
  {
    "category": "Beginner",
    "id": 2,
    "title": "Variables and Data Types",
    "content": "Variables are containers for storing data values. Python supports several types: int, float, str, and bool.",
    "code": "name = 'Alice'\nage = 25\nis_student = True\nprint(name, age, is_student)",
    "quiz": {
      "question": "What will be the output type of `type(3.0)`?",
      "options": ["int", "float", "str", "bool"],
      "answer": "float"
    }
  },
  {
    "category": "Beginner",
    "id": 3,
    "title": "Conditionals (if, elif, else)",
    "content": "Conditional statements help control program flow. Python uses indentation instead of braces.",
    "code": "x = 10\nif x > 5:\n    print('Greater than 5')\nelse:\n    print('5 or less')",
    "quiz": {
      "question": "What happens if indentation is missing under an if-statement in Python?",
      "options": [
        "The condition is ignored",
        "Python assumes a single-line block",
        "A SyntaxError is raised",
        "The interpreter continues silently"
      ],
      "answer": "A SyntaxError is raised"
    }
  },
  {
    "category": "Beginner",
    "id": 4,
    "title": "Loops (for and while)",
    "content": "Loops let you repeat tasks. The `for` loop iterates over sequences; `while` repeats while a condition is true.",
    "code": "for i in range(3):\n    print(i)",
    "quiz": {
      "question": "Which statement about `range(3)` is true?",
      "options": [
        "It produces [1, 2, 3]",
        "It produces [0, 1, 2]",
        "It runs infinitely",
        "It produces an error"
      ],
      "answer": "It produces [0, 1, 2]"
    }
  },
  {
    "category": "Beginner",
    "id": 5,
    "title": "Functions",
    "content": "Functions organize code into reusable blocks. They can take arguments and return values.",
    "code": "def greet(name):\n    return f'Hello, {name}!'\nprint(greet('Python'))",
    "quiz": {
      "question": "What is the return value of `print()` when used inside another print call?",
      "options": ["The printed text", "None", "An empty string", "A tuple"],
      "answer": "None"
    }
  },
  {
    "category": "Intermediate",
    "id": 6,
    "title": "Lists and Dictionaries",
    "content": "Lists store ordered items; dictionaries store key-value pairs.",
    "code": "fruits = ['apple', 'banana', 'cherry']\nprices = {'apple': 1.2, 'banana': 0.8}\nprint(fruits[1], prices['apple'])",
    "quiz": {
      "question": "If `fruits = ['apple', 'banana']`, what does `fruits.append('pear')` do?",
      "options": [
        "Creates a new list",
        "Adds 'pear' to the end of the list",
        "Replaces 'banana' with 'pear'",
        "Deletes 'banana'"
      ],
      "answer": "Adds 'pear' to the end of the list"
    }
  },
  {
    "category": "Intermediate",
    "id": 7,
    "title": "Exception Handling",
    "content": "Use `try`, `except`, and `finally` to handle runtime errors safely.",
    "code": "try:\n    x = int('hello')\nexcept ValueError:\n    print('Invalid number')",
    "quiz": {
      "question": "What happens if a `try` block raises a ValueError not caught by an `except` block?",
      "options": [
        "The program ignores it",
        "The program terminates with an error message",
        "Python retries the block",
        "The error is logged silently"
      ],
      "answer": "The program terminates with an error message"
    }
  },
  {
    "category": "Intermediate",
    "id": 8,
    "title": "Modules and Imports",
    "content": "Modules let you organize code across files. Use `import` to include them.",
    "code": "import math\nprint(math.sqrt(16))",
    "quiz": {
      "question": "Which line correctly imports the `sqrt` function directly?",
      "options": [
        "from math import sqrt",
        "import sqrt from math",
        "import math.sqrt",
        "include math.sqrt"
      ],
      "answer": "from math import sqrt"
    }
  },
  {
    "category": "Intermediate",
    "id": 9,
    "title": "File Handling",
    "content": "You can read and write files using the `open()` function.",
    "code": "with open('data.txt', 'w') as f:\n    f.write('Hello!')",
    "quiz": {
      "question": "Why use `with open()` instead of a plain `open()` call?",
      "options": [
        "It runs faster",
        "It automatically closes the file",
        "It requires fewer parameters",
        "It prevents syntax errors"
      ],
      "answer": "It automatically closes the file"
    }
  },
  {
    "category": "Advanced",
    "id": 10,
    "title": "Decorators",
    "content": "Decorators modify the behavior of functions using higher-order functions.",
    "code": "def debug(func):\n    def wrapper(*args, **kwargs):\n        print('Calling', func.__name__)\n        return func(*args, **kwargs)\n    return wrapper\n\n@debug\ndef greet():\n    print('Hi!')\ngreet()",
    "quiz": {
      "question": "What does a decorator function typically return?",
      "options": [
        "A string",
        "A new modified function",
        "A Boolean",
        "The same function unchanged"
      ],
      "answer": "A new modified function"
    }
  },
  {
    "category": "Advanced",
    "id": 11,
    "title": "Generators",
    "content": "Generators yield values one at a time using the `yield` keyword.",
    "code": "def countdown(n):\n    while n > 0:\n        yield n\n        n -= 1\nfor i in countdown(3):\n    print(i)",
    "quiz": {
      "question": "What is a key benefit of generators over lists?",
      "options": [
        "They run faster always",
        "They use less memory by generating values on demand",
        "They store all data in memory",
        "They can be indexed directly"
      ],
      "answer": "They use less memory by generating values on demand"
    }
  },
  {
    "category": "Advanced",
    "id": 12,
    "title": "Asynchronous Programming (async/await)",
    "content": "Async functions allow non-blocking operations for tasks like I/O or web requests.",
    "code": "import asyncio\nasync def greet():\n    await asyncio.sleep(1)\n    print('Hello async!')\nasyncio.run(greet())",
    "quiz": {
      "question": "What happens if you call an async function without `await` or `asyncio.run()`?",
      "options": [
        "It executes normally",
        "It returns a coroutine object",
        "It blocks the program",
        "It raises an ImportError"
      ],
      "answer": "It returns a coroutine object"
    }
  },
  {
    "category": "Advanced",
    "id": 13,
    "title": "NumPy Arrays",
    "content": "NumPy provides efficient numerical arrays for scientific computing.",
    "code": "import numpy as np\na = np.array([1, 2, 3])\nprint(a * 2)",
    "quiz": {
      "question": "How does `np.array([1, 2, 3]) * 2` differ from `[1, 2, 3] * 2`?",
      "options": [
        "Both produce [1, 2, 3, 1, 2, 3]",
        "NumPy multiplies each element; lists repeat the sequence",
        "Both double each element",
        "Both give errors"
      ],
      "answer": "NumPy multiplies each element; lists repeat the sequence"
    }
  },
  {
    "category": "Advanced",
    "id": 14,
    "title": "Web Development with Flask",
    "content": "Flask is a lightweight web framework for Python.",
    "code": "from flask import Flask\napp = Flask(__name__)\n@app.route('/')\ndef home():\n    return 'Hello Flask!'\n\n# app.run()",
    "quiz": {
      "question": "What does `@app.route('/')` do in Flask?",
      "options": [
        "It defines the default web page route",
        "It runs the Flask server",
        "It creates a database connection",
        "It starts a background task"
      ],
      "answer": "It defines the default web page route"
    }
  },
  {
    "category": "Expert",
    "id": 15,
    "title": "APIs and HTTP Requests",
    "content": "Python’s `requests` library lets you interact with APIs easily.",
    "code": "import requests\nresponse = requests.get('https://api.github.com')\nprint(response.status_code)",
    "quiz": {
      "question": "What type of object is returned by `requests.get()`?",
      "options": [
        "A JSON object",
        "A Response object containing data and metadata",
        "A tuple of status and text",
        "A file-like object"
      ],
      "answer": "A Response object containing data and metadata"
    }
  },
  {
    "category": "Expert",
    "id": 16,
    "title": "Object-Oriented Programming (OOP)",
    "content": "OOP in Python allows encapsulation, inheritance, and polymorphism.",
    "code": "class Animal:\n    def speak(self):\n        return 'Sound'\nclass Dog(Animal):\n    def speak(self):\n        return 'Bark'\n\nprint(Dog().speak())",
    "quiz": {
      "question": "What happens when a subclass defines a method with the same name as in the parent class?",
      "options": [
        "The subclass method overrides the parent’s method",
        "Both are executed",
        "It causes an error",
        "Python ignores the subclass method"
      ],
      "answer": "The subclass method overrides the parent’s method"
    }
  }
]
