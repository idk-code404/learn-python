[
  {
    "id": 1,
    "title": "Introduction to Python",
    "content": "Python is a beginner-friendly language. Let's print something!",
    "code": "print('Hello, world!')",
    "quiz": {
      "question": "Which function displays text in Python?",
      "options": ["say()", "print()", "echo()", "display()"],
      "answer": "print()"
    }
  },
  {
    "id": 2,
    "title": "Variables and Data Types",
    "content": "Variables store data. Python supports integers, floats, strings, and booleans.",
    "code": "x = 10\ny = 3.14\nname = 'Alice'\nis_happy = True\nprint(x, y, name, is_happy)",
    "quiz": {
      "question": "Which of these correctly assigns a variable?",
      "options": ["10 = x", "x == 10", "x = 10", "var x = 10"],
      "answer": "x = 10"
    }
  },
  {
    "id": 3,
    "title": "Operators and Expressions",
    "content": "Operators let us calculate values. Example: +, -, *, /, %, ** for power.",
    "code": "a = 5\nb = 2\nprint(a + b)\nprint(a ** b)\nprint(a % b)",
    "quiz": {
      "question": "What operator is used for exponentiation in Python?",
      "options": ["^", "**", "pow", "exp"],
      "answer": "**"
    }
  },
  {
    "id": 4,
    "title": "Control Flow: if Statements",
    "content": "Conditional statements let you run code only if conditions are met.",
    "code": "x = 10\nif x > 5:\n    print('x is greater than 5')",
    "quiz": {
      "question": "Which keyword is used for conditions in Python?",
      "options": ["if", "when", "switch", "case"],
      "answer": "if"
    }
  },
  {
    "id": 5,
    "title": "Loops: for and while",
    "content": "Loops let you repeat tasks. 'for' loops iterate over sequences, 'while' loops run until a condition is false.",
    "code": "for i in range(5):\n    print(i)\n\ncount = 3\nwhile count > 0:\n    print(count)\n    count -= 1",
    "quiz": {
      "question": "Which function generates a sequence of numbers?",
      "options": ["seq()", "numbers()", "range()", "loop()"],
      "answer": "range()"
    }
  },
  {
    "id": 6,
    "title": "Functions",
    "content": "Functions are reusable blocks of code defined with 'def'.",
    "code": "def greet(name):\n    return 'Hello, ' + name\n\nprint(greet('Alice'))",
    "quiz": {
      "question": "Which keyword defines a function in Python?",
      "options": ["func", "function", "def", "define"],
      "answer": "def"
    }
  },
  {
    "id": 7,
    "title": "Lists and Tuples",
    "content": "Lists are mutable sequences, tuples are immutable.",
    "code": "fruits = ['apple', 'banana', 'cherry']\nprint(fruits[0])\nfruits.append('orange')\nprint(fruits)",
    "quiz": {
      "question": "Which method adds an element to a list?",
      "options": ["push()", "add()", "append()", "insert()"],
      "answer": "append()"
    }
  },
  {
    "id": 8,
    "title": "Dictionaries",
    "content": "Dictionaries store key-value pairs. Example: {'name': 'Alice', 'age': 25}.",
    "code": "person = {'name': 'Alice', 'age': 25}\nprint(person['name'])\nprint(person.get('age'))",
    "quiz": {
      "question": "What symbol is used to define dictionaries?",
      "options": ["[]", "()", "{}", "<>"],
      "answer": "{}"
    }
  },
  {
    "id": 9,
    "title": "Classes and Objects",
    "content": "Python is object-oriented. Classes define blueprints for objects.",
    "code": "class Dog:\n    def __init__(self, name):\n        self.name = name\n    def bark(self):\n        print(self.name + ' says woof!')\n\nd = Dog('Rex')\nd.bark()",
    "quiz": {
      "question": "Which method initializes a Python class?",
      "options": ["__start__", "__create__", "__init__", "init()"],
      "answer": "__init__"
    }
  },
  {
    "id": 10,
    "title": "File Handling",
    "content": "Python can read and write files with open().",
    "code": "with open('example.txt','w') as f:\n    f.write('Hello file!')\n\nwith open('example.txt','r') as f:\n    print(f.read())",
    "quiz": {
      "question": "Which mode opens a file for writing?",
      "options": ["'r'", "'rw'", "'w'", "'write'"],
      "answer": "'w'"
    }
  },
  {
    "id": 11,
    "title": "Exceptions and Error Handling",
    "content": "Errors can be caught using try/except blocks.",
    "code": "try:\n    x = 1 / 0\nexcept ZeroDivisionError:\n    print('Cannot divide by zero!')",
    "quiz": {
      "question": "Which keyword handles errors in Python?",
      "options": ["catch", "except", "handle", "error"],
      "answer": "except"
    }
  },
  {
    "id": 12,
    "title": "Modules and Imports",
    "content": "Python code can be organized into modules. Use 'import' to reuse them.",
    "code": "import math\nprint(math.sqrt(16))",
    "quiz": {
      "question": "Which keyword is used to include a module?",
      "options": ["use", "import", "require", "include"],
      "answer": "import"
    }
  },
  {
    "id": 13,
    "title": "Standard Library",
    "content": "Pythonâ€™s standard library includes datetime, random, os, sys, etc.",
    "code": "import random\nprint(random.randint(1, 10))",
    "quiz": {
      "question": "Which module generates random numbers?",
      "options": ["math", "random", "os", "numbers"],
      "answer": "random"
    }
  },
  {
    "id": 14,
    "title": "Working with APIs (requests)",
    "content": "You can fetch data from web APIs using the requests library.",
    "code": "import requests\nresponse = requests.get('https://api.github.com')\nprint(response.status_code)",
    "quiz": {
      "question": "Which library is commonly used for HTTP requests?",
      "options": ["http", "urllib", "requests", "net"],
      "answer": "requests"
    }
  },
  {
    "id": 15,
    "title": "Virtual Environments & pip",
    "content": "Virtual environments isolate dependencies. pip installs libraries.",
    "code": "# In terminal:\n# python -m venv env\n# source env/bin/activate\n# pip install requests",
    "quiz": {
      "question": "Which tool installs Python packages?",
      "options": ["npm", "pip", "brew", "apt"],
      "answer": "pip"
    }
  },
  {
    "id": 16,
    "title": "Decorators",
    "content": "Decorators modify functions. Defined with @ syntax.",
    "code": "def debug(func):\n    def wrapper(*args, **kwargs):\n        print('Calling', func.__name__)\n        return func(*args, **kwargs)\n    return wrapper\n\n@debug\ndef say_hello():\n    print('Hello!')\n\nsay_hello()",
    "quiz": {
      "question": "Which symbol is used for decorators?",
      "options": ["@", "#", "&", "$"],
      "answer": "@"
    }
  },
  {
    "id": 17,
    "title": "Generators",
    "content": "Generators yield values lazily using 'yield'.",
    "code": "def count_up_to(n):\n    i = 1\n    while i <= n:\n        yield i\n        i += 1\n\nfor num in count_up_to(5):\n    print(num)",
    "quiz": {
      "question": "Which keyword produces values in generators?",
      "options": ["return", "yield", "give", "next"],
      "answer": "yield"
    }
  },
  {
    "id": 18,
    "title": "Async and Await",
    "content": "Python supports asynchronous programming with async/await.",
    "code": "import asyncio\n\nasync def hello():\n    await asyncio.sleep(1)\n    print('Hello async!')\n\nasyncio.run(hello())",
    "quiz": {
      "question": "Which keyword runs asynchronous functions?",
      "options": ["await", "asyncio.run()", "start()", "future.run()"],
      "answer": "asyncio.run()"
    }
  },
  {
    "id": 19,
    "title": "NumPy for Data Science",
    "content": "NumPy provides arrays and math operations for data science.",
    "code": "import numpy as np\narr = np.array([1,2,3])\nprint(arr * 2)",
    "quiz": {
      "question": "Which library is core to scientific computing in Python?",
      "options": ["pandas", "math", "numpy", "scipy"],
      "answer": "numpy"
    }
  },
  {
    "id": 20,
    "title": "Web Development with Flask",
    "content": "Flask is a lightweight web framework for Python.",
    "code": "from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return 'Hello, Flask!'\n\nif __name__ == '__main__':\n    app.run(debug=True)",
    "quiz": {
      "question": "Which decorator defines a route in Flask?",
      "options": ["@endpoint", "@route", "@url", "@app.route"],
      "answer": "@app.route"
    }
  }
]
