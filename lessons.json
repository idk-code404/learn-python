[
  {
    "id": 1,
    "title": "Hello World",
    "category": "Beginner",
    "content": "Your first Python program — use print() to display text.",
    "code": "print('Hello, World!')",
    "quiz": {
      "question": "You want your program to display 'Hello, World!'. Which function should you use?",
      "options": ["print()", "echo()", "write()", "display()"],
      "answer": "print()"
    }
  },
  {
    "id": 2,
    "title": "Variables & Types",
    "category": "Beginner",
    "content": "Store values in variables (int, float, str, bool).",
    "code": "name = 'Alice'\nage = 25\nis_student = True",
    "quiz": {
      "question": "Which statement correctly assigns the integer 25 to the variable age?",
      "options": ["age = 25", "int age = 25", "age := 25", "let age = 25"],
      "answer": "age = 25"
    }
  },
  {
    "id": 3,
    "title": "User Input",
    "category": "Beginner",
    "content": "Read text from users using input(), which returns a string.",
    "code": "name = input('What is your name? ')\nprint('Hello', name)",
    "quiz": {
      "question": "Which function reads a line of input from the user?",
      "options": ["input()", "read()", "scan()", "get()"],
      "answer": "input()"
    }
  },
  {
    "id": 4,
    "title": "Conditionals",
    "category": "Beginner",
    "content": "Control flow with if / elif / else using indentation.",
    "code": "x = 10\nif x > 5:\n    print('Big')\nelse:\n    print('Small')",
    "quiz": {
      "question": "What happens if code under an if-statement is not indented?",
      "options": ["It runs normally", "A SyntaxError is raised", "It is ignored", "Python auto-indents"],
      "answer": "A SyntaxError is raised"
    }
  },
  {
    "id": 5,
    "title": "Loops: for, while",
    "category": "Beginner",
    "content": "Repeat actions using for loops over sequences or while loops with conditions.",
    "code": "for i in range(3):\n    print(i)\n\n# while example\ncount = 0\nwhile count < 3:\n    print(count)\n    count += 1",
    "quiz": {
      "question": "Which construct lets you iterate over a sequence of numbers?",
      "options": ["for i in range(n)", "while i in range(n)", "repeat n times", "loop(range(n))"],
      "answer": "for i in range(n)"
    }
  },
  {
    "id": 6,
    "title": "Functions",
    "category": "Beginner",
    "content": "Define reusable blocks with def and return values.",
    "code": "def greet(name):\n    return f'Hello, {name}!'\n\nprint(greet('Sam'))",
    "quiz": {
      "question": "Which keyword defines a function in Python?",
      "options": ["def", "function", "func", "define"],
      "answer": "def"
    }
  },
  {
    "id": 7,
    "title": "Lists",
    "category": "Beginner",
    "content": "Ordered, mutable sequences of values.",
    "code": "fruits = ['apple', 'banana', 'cherry']\nprint(fruits[1])",
    "quiz": {
      "question": "Given fruits = ['apple','banana'], what does fruits.append('pear') do?",
      "options": ["Adds 'pear' to the end", "Replaces 'banana'", "Deletes 'banana'", "Creates a new list"],
      "answer": "Adds 'pear' to the end"
    }
  },
  {
    "id": 8,
    "title": "Dictionaries",
    "category": "Beginner",
    "content": "Key-value mapping useful for structured data.",
    "code": "person = {'name':'Alice','age':25}\nprint(person['name'])",
    "quiz": {
      "question": "Which data type stores key-value pairs?",
      "options": ["dict", "list", "tuple", "set"],
      "answer": "dict"
    }
  },
  {
    "id": 9,
    "title": "Strings & Formatting",
    "category": "Beginner",
    "content": "Work with text and format via f-strings.",
    "code": "name = 'Alice'\nprint(f'{name} is learning Python')",
    "quiz": {
      "question": "Which syntax is an f-string to insert variable name into a string?",
      "options": ["f'{name}'", "'{name}'", '"%s" % name', "format(name)"],
      "answer": "f'{name}'"
    }
  },
  {
    "id": 10,
    "title": "Comments & Style",
    "category": "Beginner",
    "content": "Use # for comments and follow PEP8 basics (4 spaces).",
    "code": "# This is a comment\nprint('Hello')",
    "quiz": {
      "question": "How do you write a single-line comment in Python?",
      "options": ["# comment", "// comment", "/* comment */", "<!-- comment -->"],
      "answer": "# comment"
    }
  },
  {
    "id": 11,
    "title": "File I/O",
    "category": "Intermediate",
    "content": "Read and write files safely with with open(...).",
    "code": "with open('data.txt','r') as f:\n    content = f.read()",
    "quiz": {
      "question": "Why use with open('file') as f: rather than open() alone?",
      "options": ["It auto-closes the file", "It runs faster", "It prevents reading", "It compresses the file"],
      "answer": "It auto-closes the file"
    }
  },
  {
    "id": 12,
    "title": "Error Handling",
    "category": "Intermediate",
    "content": "Handle runtime exceptions with try/except/finally.",
    "code": "try:\n    x = int('abc')\nexcept ValueError:\n    print('Not a number')",
    "quiz": {
      "question": "What does except ValueError do in a try/except block?",
      "options": ["Catches ValueError errors", "Raises ValueError", "Ignores all errors", "Retries the operation"],
      "answer": "Catches ValueError errors"
    }
  },
  {
    "id": 13,
    "title": "Modules & Imports",
    "category": "Intermediate",
    "content": "Break code into modules and import functions or modules.",
    "code": "import math\nprint(math.sqrt(16))",
    "quiz": {
      "question": "Which statement imports the sqrt function directly from math?",
      "options": ["from math import sqrt", "import sqrt from math", "import math.sqrt", "use math.sqrt"],
      "answer": "from math import sqrt"
    }
  },
  {
    "id": 14,
    "title": "List Comprehensions",
    "category": "Intermediate",
    "content": "Concise syntax to create lists from iterables.",
    "code": "squares = [x**2 for x in range(5)]\nprint(squares)",
    "quiz": {
      "question": "Which creates a list of squares from 0 to 4?",
      "options": ["[x**2 for x in range(5)]", "for x in range(5): x**2", "map(lambda x: x*x, range(5))", "[x^2 for x in range(5)]"],
      "answer": "[x**2 for x in range(5)]"
    }
  },
  {
    "id": 15,
    "title": "Functions with Parameters",
    "category": "Intermediate",
    "content": "Functions accept arguments, have defaults and return values.",
    "code": "def add(a, b=0):\n    return a + b\nprint(add(2,3))",
    "quiz": {
      "question": "How do you define a function with a default parameter b=0?",
      "options": ["def func(a, b=0):", "def func(a, b): b=0", "def func(a, b?):", "func def(a, b=0):"],
      "answer": "def func(a, b=0):"
    }
  },
  {
    "id": 16,
    "title": "JSON & APIs",
    "category": "Intermediate",
    "content": "Use json to parse and requests to call APIs.",
    "code": "import json\nobj = json.loads('{\"name\":\"Alice\"}')\nprint(obj['name'])",
    "quiz": {
      "question": "Which module converts JSON text to Python objects?",
      "options": ["json", "pickle", "xml", "csv"],
      "answer": "json"
    }
  },
  {
    "id": 17,
    "title": "Lambda & Functional Tools",
    "category": "Intermediate",
    "content": "Quick one-line functions and map/filter usage.",
    "code": "double = lambda x: x*2\nprint(list(map(double,[1,2,3])))",
    "quiz": {
      "question": "What does lambda x: x*2 create?",
      "options": ["An anonymous function", "A list", "A loop", "A decorator"],
      "answer": "An anonymous function"
    }
  },
  {
    "id": 18,
    "title": "OOP Basics",
    "category": "Intermediate",
    "content": "Use classes and instances to model data and behavior.",
    "code": "class Dog:\n    def __init__(self, name):\n        self.name = name\n    def bark(self):\n        return f'{self.name} says woof'\nprint(Dog('Fido').bark())",
    "quiz": {
      "question": "Which method runs when you create a new class instance?",
      "options": ["__init__", "__start__", "__create__", "__new__"],
      "answer": "__init__"
    }
  },
  {
    "id": 19,
    "title": "Docstrings & Help",
    "category": "Intermediate",
    "content": "Document functions and classes using triple-quoted strings.",
    "code": "def add(a,b):\n    \"\"\"Add two numbers\"\"\"\n    return a+b\nprint(add.__doc__)",
    "quiz": {
      "question": "Where is a function’s docstring stored and accessible?",
      "options": ["__doc__", "__info__", "__help__", "__docstr__"],
      "answer": "__doc__"
    }
  },
  {
    "id": 20,
    "title": "Virtual Environments",
    "category": "Intermediate",
    "content": "Isolate dependencies using venv or virtualenv.",
    "code": "python -m venv myenv\n# then activate the environment",
    "quiz": {
      "question": "Which command creates a virtual environment named myenv?",
      "options": ["python -m venv myenv", "venv create myenv", "pipenv install myenv", "mkvenv myenv"],
      "answer": "python -m venv myenv"
    }
  },
  {
    "id": 21,
    "title": "Generators & Iterators",
    "category": "Advanced",
    "content": "Yield values lazily using generators to save memory.",
    "code": "def counter(n):\n    for i in range(n):\n        yield i\nfor x in counter(3): print(x)",
    "quiz": {
      "question": "Why prefer a generator for large sequences?",
      "options": ["It uses less memory", "It runs faster always", "It can be indexed", "It stores all values"],
      "answer": "It uses less memory"
    }
  },
  {
    "id": 22,
    "title": "Decorators",
    "category": "Advanced",
    "content": "Wrap functions to enhance behavior without changing their code.",
    "code": "def log(func):\n    def wrapper(*a, **k):\n        print('running', func.__name__)\n        return func(*a, **k)\n    return wrapper\n\n@log\ndef say():\n    print('hi')\nsay()",
    "quiz": {
      "question": "What symbol applies a decorator above a function definition?",
      "options": ["@", "#", "%", "&"],
      "answer": "@"
    }
  },
  {
    "id": 23,
    "title": "Async / await",
    "category": "Advanced",
    "content": "Write asynchronous code using async/await for concurrency.",
    "code": "import asyncio\nasync def main():\n    await asyncio.sleep(1)\n    print('done')\nasyncio.run(main())",
    "quiz": {
      "question": "What does calling an async function without await return?",
      "options": ["Coroutine object", "Result immediately", "None", "Error"],
      "answer": "Coroutine object"
    }
  },
  {
    "id": 24,
    "title": "Regular Expressions",
    "category": "Advanced",
    "content": "Use re to search and extract patterns from text.",
    "code": "import re\nnums = re.findall(r'\\d+', 'abc123def45')\nprint(nums)",
    "quiz": {
      "question": "Which module is used for pattern matching with regex?",
      "options": ["re", "regex", "match", "pattern"],
      "answer": "re"
    }
  },
  {
    "id": 25,
    "title": "HTTP & APIs (requests)",
    "category": "Advanced",
    "content": "Fetch data from web APIs with requests (install via pip).",
    "code": "import requests\nr = requests.get('https://api.github.com')\nprint(r.status_code)",
    "quiz": {
      "question": "What type of object does requests.get(...) return?",
      "options": ["Response object", "JSON dict", "Tuple", "String"],
      "answer": "Response object"
    }
  },
  {
    "id": 26,
    "title": "Filesystem & pathlib",
    "category": "Advanced",
    "content": "Use pathlib for cross-platform path handling.",
    "code": "from pathlib import Path\np = Path.cwd()\nprint(p)",
    "quiz": {
      "question": "Which module helps safely manipulate file paths across OSes?",
      "options": ["pathlib", "os.path", "sys", "glob"],
      "answer": "pathlib"
    }
  },
  {
    "id": 27,
    "title": "Logging",
    "category": "Advanced",
    "content": "Record application events using the logging module.",
    "code": "import logging\nlogging.basicConfig(level=logging.INFO)\nlogging.info('hello')",
    "quiz": {
      "question": "Why use logging instead of print for production apps?",
      "options": ["Level control and persistence", "It's faster", "It avoids errors", "It prints prettier"],
      "answer": "Level control and persistence"
    }
  },
  {
    "id": 28,
    "title": "NumPy Basics",
    "category": "Advanced",
    "content": "Fast, vectorized operations on arrays via NumPy.",
    "code": "import numpy as np\narr = np.array([1,2,3])\nprint(arr * 2)",
    "quiz": {
      "question": "How does numpy array multiplication differ from list multiplication?",
      "options": ["NumPy multiplies elements; list repeats sequence", "Both repeat sequence", "Both multiply elements", "NumPy errors"],
      "answer": "NumPy multiplies elements; list repeats sequence"
    }
  },
  {
    "id": 29,
    "title": "Matplotlib",
    "category": "Advanced",
    "content": "Create visual charts and figures using matplotlib.",
    "code": "import matplotlib.pyplot as plt\nplt.plot([1,2,3],[4,5,6])\nplt.show()",
    "quiz": {
      "question": "Which library is commonly used for plotting in Python?",
      "options": ["Matplotlib", "Flask", "Pandas", "NumPy"],
      "answer": "Matplotlib"
    }
  },
  {
    "id": 30,
    "title": "Flask Web Apps",
    "category": "Advanced",
    "content": "Lightweight web framework for small APIs and apps.",
    "code": "from flask import Flask\napp = Flask(__name__)\n@app.route('/')\ndef home():\n    return 'Hello Flask!'\n# app.run()",
    "quiz": {
      "question": "Which decorator defines a route in Flask?",
      "options": ["@app.route", "@route", "@flask.route", "@app.url"],
      "answer": "@app.route"
    }
  },
  {
    "id": 31,
    "title": "Machine Learning Intro",
    "category": "Expert",
    "content": "Overview of ML concepts and scikit-learn basics.",
    "code": "from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()",
    "quiz": {
      "question": "Which library provides ready-made classical ML models like LinearRegression?",
      "options": ["scikit-learn", "TensorFlow", "NumPy", "Pandas"],
      "answer": "scikit-learn"
    }
  },
  {
    "id": 32,
    "title": "Pandas DataFrames",
    "category": "Expert",
    "content": "Use DataFrames for tabular data processing and cleaning.",
    "code": "import pandas as pd\ndf = pd.DataFrame({'A':[1,2],'B':[3,4]})\nprint(df.head())",
    "quiz": {
      "question": "Which library provides the DataFrame structure for tabular data?",
      "options": ["Pandas", "NumPy", "Matplotlib", "Seaborn"],
      "answer": "Pandas"
    }
  },
  {
    "id": 33,
    "title": "Web Scraping",
    "category": "Expert",
    "content": "Use requests + BeautifulSoup to extract data from HTML.",
    "code": "import requests\nfrom bs4 import BeautifulSoup\nhtml = requests.get('https://example.com').text\nsoup = BeautifulSoup(html,'html.parser')\nprint(soup.title.string)",
    "quiz": {
      "question": "Which library helps parse HTML when scraping pages?",
      "options": ["BeautifulSoup", "requests", "selenium", "urllib"],
      "answer": "BeautifulSoup"
    }
  },
  {
    "id": 34,
    "title": "Testing with pytest",
    "category": "Expert",
    "content": "Write readable automated tests using pytest.",
    "code": "def test_sum():\n    assert sum([1,2]) == 3",
    "quiz": {
      "question": "Which framework simplifies writing tests compared to unittest?",
      "options": ["pytest", "doctest", "unittest2", "nose"],
      "answer": "pytest"
    }
  },
  {
    "id": 35,
    "title": "Async APIs (aiohttp)",
    "category": "Expert",
    "content": "Concurrent HTTP calls using aiohttp for async I/O.",
    "code": "import aiohttp\nimport asyncio\n# use aiohttp.ClientSession() in async functions",
    "quiz": {
      "question": "Which library supports asynchronous HTTP requests in Python?",
      "options": ["aiohttp", "requests", "urllib", "httpx (sync only)"],
      "answer": "aiohttp"
    }
  },
  {
    "id": 36,
    "title": "Multiprocessing",
    "category": "Expert",
    "content": "Use multiprocessing for CPU-bound parallelism.",
    "code": "from multiprocessing import Pool\nwith Pool(4) as p:\n    print(p.map(lambda x: x*x, [1,2,3,4]))",
    "quiz": {
      "question": "Which module lets you run code across multiple CPU cores?",
      "options": ["multiprocessing", "asyncio", "threading", "concurrent.futures (threads)"],
      "answer": "multiprocessing"
    }
  },
  {
    "id": 37,
    "title": "Django Basics",
    "category": "Expert",
    "content": "Django is a batteries-included web framework with ORM.",
    "code": "django-admin startproject mysite",
    "quiz": {
      "question": "Which framework includes an ORM and MVC-like structure for large apps?",
      "options": ["Django", "Flask", "Bottle", "FastAPI"],
      "answer": "Django"
    }
  },
  {
    "id": 38,
    "title": "Seaborn Visualizations",
    "category": "Expert",
    "content": "Seaborn makes statistical plotting easier on top of Matplotlib.",
    "code": "import seaborn as sns\nsns.barplot(x='A', y='B', data=df)",
    "quiz": {
      "question": "Which library builds on Matplotlib for polished statistical plots?",
      "options": ["Seaborn", "Plotly", "Bokeh", "Altair"],
      "answer": "Seaborn"
    }
  },
  {
    "id": 39,
    "title": "Deploying Flask Apps",
    "category": "Expert",
    "content": "Deploy production apps with Gunicorn, uWSGI, or hosts like Render/Heroku.",
    "code": "gunicorn app:app",
    "quiz": {
      "question": "What command runs a Flask app with Gunicorn in production?",
      "options": ["gunicorn app:app", "flask run", "python app.py", "uwsgi app.py"],
      "answer": "gunicorn app:app"
    }
  },
  {
    "id": 40,
    "title": "AI & OpenAI API",
    "category": "Expert",
    "content": "Use the OpenAI API to generate text, code, or build chatbots.",
    "code": "import openai\n# client = openai.OpenAI(api_key='...')",
    "quiz": {
      "question": "Which API can your Python app call to generate natural language text?",
      "options": ["OpenAI API", "Google Maps API", "Stripe API", "GitHub API"],
      "answer": "OpenAI API"
    }
  }
]
